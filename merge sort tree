struct ST {
#define lc (n << 1)
#define rc ((n << 1) | 1)
    vector<vector<pair<ll,ll>>>v;
    vector<pair<ll,ll>>a;
    ST(vector<pair<ll,ll>> aa) {
        ll nn=aa.size();
        v.resize(4*nn);
        a=aa;
    }
    inline int combine(int a, int b) {
        return (a||b); //merge left and right queries
    }
    inline void pull(int n) {
        v[n].clear();
        ll it1=0,it2=0;
        while(1){
            if(it1==v[lc].size()&&it2==v[rc].size()){
                break;
            }
            else if(it1==v[lc].size()){
                v[n].push_back(v[rc][it2]);
                it2++;
            }
            else if(it2==v[rc].size()){
                v[n].push_back(v[lc][it1]);
                it1++;
            }
            else if(v[lc][it1]<=v[rc][it2]){
                v[n].push_back(v[lc][it1]);
                it1++;
            }
            else if(v[lc][it1]>v[rc][it2]){
                v[n].push_back(v[rc][it2]);
                it2++;
            }
        }
         //merge lower nodes of the tree to get the parent node
    }
    void build(int n, int b, int e) {
        if(b == e) {
            v[n].clear();
            v[n].push_back(a[b]);
            return;
        }
        int mid = (b + e) >> 1;
        build(lc, b, mid);
        build(rc, mid + 1, e);
        pull(n);
    }
    int query(int n, int b, int e, int i, int j,pair<ll,ll>S) {   //quer(1,1,n,l,r)  call in this way
        if(i > e || b > j) return 0;
        if(i <= b && e <= j) {
            if((find(v[n].begin(),v[n].end(),S)-v[n].begin())<v[n].size()) return 1;
            else return 0;
        }
        int mid = (b + e) >> 1;
        return combine(query(lc, b, mid, i, j,S), query(rc, mid + 1, e, i, j,S));
    }
};
